【関数】

<一般的な関数>
関数名(引数);
function 関数名(引数) {
  return 返り値;
}

<関数式>
const func = function(arg1, arg2) {
  return value;
}
func(value1, value2);

<アロー関数>
const func = (arg1, arg2) => {
  return value;
}
func(value1, value2);

<コールバック関数>
function mainFunc(arg1, arg2, callbackFunc) {
  const callbackResult = callbackFunc(arg1, arg2);
  return callbackResult;
}

const callbackFunc = function(carg1, carg2) {
  return carg1 + carg2;
}
mainFuncResult = mainFunc(1, 1, callbackFunc);
console.log(mainFuncResult); → 2

<スコープ>
const grobalValue = "grobalConst";

function localFunc() {
  const localValue = "localConst";
}

console.log(grobalValue); → "grobalConst"
console.log(localValue); → Error: localValue is not defined.

<export/import>
export:変数や関数名の前に記述することでexportを記述することで別ファイルから呼び出すことが可能となる
export function popup(input) {
  console.log(input);
}

import { popup } from './export.js';
popup('hello');

test = (name, point) => {
  if (point)
}

【繰り返し】
<for文>
const array = ["hoge", "fuga", "piyo", "hogera", "hogehoge"];
for (let i = 0; i < array.length; i++) {
  console.log(array[i]);
}
for (let index in array) {
  console.log(array[index]);
}
for (let item of array) {
  console.log(item);
}

<while文>
let n = 0;
while (n < 10) {
  n++;
  console.log(`${n}`)
}

<do.while文>
let n = 0;
do {
  n++;
  console.log(`${n}`);
}while (n < 10)

【文字列】
<文字列へのアクセス>
C言語のChar*のようにインデックスで参照可能
const str = "hoghoge";

console.log(str[0]); → h
console.log(str[1]); → o
console.log(str[2]); → g

<文字列の分割・リストの結合>
split():文字列の分割
const splitedString = "HTML,Java,PHP".split(",");
console.log(splitedString);
join():リストを任意の文字で文字列として結合
console.log(splitedString.join("$")); → "HTML$Java$PHP"

<文字列の長さ>
const str = "hogehoge";
console.log(str.length); → 8

<文字列の比較>
console.log("hoge" === "hoge");
console.log("hoge" === "fuga");
※文字列の比較には === を使用する (Javaのequalsみたいな感じ？)

<文字列の一部を取得>
slice():開始位置の最小は0
const strSlice = "hogehoge";
console.log(strSlice.slice(1,3)); → "og"
console.log(strSlice.slice(4)); → "hoge"
substr():開始位置の最小は0
const strSubstr = "hogehoge";
console.log(strSubstr.substring(1,3)); → "og"
console.log(strSubstr.substring(4)); → "hoge"

<文字列の検索>
検索対象文字列の開始位置を知りたい場合:indexOf()
const strIndex = "hogefugapiyohogera";
console.log(strIndex.indexOf("piyo")); → 8
console.log(strIndex.indexOf("foo")); → -1 (存在しない場合)

<文字列の存在確認>
検索文字が含まれているかを確認する場合:includes()
const strIncludes = "hogefugapiyohogera";
console.log(strIncludes.includes("piyo")); → true
console.log(strIncludes.includes("foo")); → false

【ダイアログ】
警告メッセージダイアログ
alert("warn");

はい、いいえダイアログ
const result = confirm("Do you want to execute?");
→ ユーザが選択した結果がBooleanで返される

ユーザ入力フォーム
const result = prompt("Please input strings.");
console.log(result);
→ ユーザが入力した文字列が返される

