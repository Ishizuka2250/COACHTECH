【演算子】
<基本演算子>
・加算 +
・減算 -
・乗算 *
・除算 /
・剰余(あまり) %
・インクリメント ++
・デクリメント --

<比較演算子>
・a == b  → aとbが等価
・a === b → aとbが型・オブジェクトレベルで等価
・a != b  → aとbが偽
・a < b   → aがbより小さい
・a <= b  → aがb以下
・a > b   → aがbより大きい
・a >= b  → aがb以上

<論理演算子>
a && b → aとbが両方成立する
a || b → aまたはbのどちらか1つ もしくは その両方が成立する
!a     → aの偽 (a以外が成立する)

a ?? b → a が null または undefined ならば b が返される
undefinedの場合：
  let myText; //undefined

  let notFalsyText = myText || 'Hello world'; (デフォルト値を代入する従来の方法)
  console.log(notFalsyText); →  Hello world

  let preservingFalsy = myText ?? 'Hi neighborhood'; (デフォルト値を代入する新しい新しい方法)
  console.log(preservingFalsy); → Hi neighborhood

空文字の場合：
  let myText = '';

  let notFalsyText = myText || 'Hello world';
  console.log(notFalsyText); →  Hello world

  let preservingFalsy = myText ?? 'Hi neighborhood';
  console.log(preservingFalsy); → "" (undefinedではないので 'Hi neighborhood' が表示されない

【条件分岐】

<if文>
if (price < 1000) {
  console.log("hoge");
} else if (price > 2000) {
  console.log("fuga");
} else {
  console.log("hoga");
}

<三項演算子>
const hoge = (price < 1000) ? "true" : "false";

<switch文>
switch (hoge) {
  case 1:
    console.log("case1");
    break;
  case 2:
    console.log("case2");
    break;
  default:
    console.log("default");
    break;
}
※C, Javaと同様にcaseの最後にbreakが必要

【配列】
<配列の作り方>
array = ["hoge", "fuga", "piyo", "hogera", "hogehoge"];

<配列へのアクセス>
console.log(array); → ["hoge", "fuga", "piyo", "hogera", "hogehoge"];
console.log(array[0]); → "hoge";
console.log(array[1]); → "fuga";
※配列の要素番号の開始は 0 から

<要素の置き換え>
array[4] = "piypiyo"; hogehoge → piyopiyo;

<要素の総数>
console.log(array.length); → 5

<要素の追加・削除>
- push：要素を配列の末尾に追加
- unshift：要素を配列の先頭に追加
- pop：配列の末尾の要素を削除
- shift：配列の先頭の要素を削除
- splice：指定の場所の要素を削除

let array = []

array.push("hoge"); → ["hoge"]
array.unshift("fuga"); → ["fuga", "hoge"]

array.pop(); → ["fuga"] (hogeを削除)
array.shift(); → [] (fugaを削除)

array = ["hoge", "fuga", "piyo", "hogera"];

array.splice(1, 3) → ["hoge"] (fuga [要素1] から3つを削除)

<配列同士の結合>
const array = ["hoge", "fuga", "piyo"];

const newArray = array.concat("hogera", "hogehoge");
→ ["hoge", "fuga", "piyo", "hogera", "hogehoge"]

スプレット構文を使用した場合
cons newArray = [...array, "hogera", "hogehoge"];

<配列要素の検索>
[要素のインデックス取得]
const array = ["hoge", "fuga", "piyo", "hogera", "hogehoge"];
console.log(array.indexOf("piyo")); → 2
console.log(array.indexOf("foo")); → -1 (配列に存在しない場合)

[要素の取得]
findを使用した方法：
const array = [10, 30, 5, 40];
console.log(array.find(function(element) {
  return element > 20
}));
→ 30 (条件に合致した最初の要素が返される)

sliceを使用した方法：
const array = [10, 30, 5, 40];
console.log(array.slice(2, 3);
→ 5, 40
console.log(arrya.slice(1));
→ 30, 5, 40 (第2引数を省略した場合は第1引数以降の値が取得される)

<要素の存在確認>
const array = ["hoge", "fuga", "piyo", "hogera", "hogehoge"];
if (array.indexOf("fuga") != -1) {
  console.log("exist.");
} else {
  console.log("not exist");
}

if (array.includes("fuga")) {
  console.log("exist.");
} else {
  console.log("not exist");
}

<配列の反復処理>
foreach：
const array = ["hoge", "fuga", "piyo", "hogera", "hogehoge"];
array.forEach(function (item, index) {
  if (item == "hogera") {
    console.log(`${item} は ${index} 番目の要素です.`)
  }
});

map:全要素に関数を実行して処理結果を新しい配列として作成する
const array = [10, 30, 5, 40];
const result = array.map(function(item) {
  return item * 2;
});
console.log(result);
→ [20, 60, 10, 80]

filter:全要素に関数を実行して、条件に合致した配列を作成する
const array = [10, 30, 5, 40];
const result = array.filter(function(item) {
  return item % 2 === 1;
});
console.log(result);
→ 5

